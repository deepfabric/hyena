syntax = "proto2";
package rpc;

import "pb/meta/pb.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

// MsgType msg type
enum MsgType {
    MsgSearchReq = 0;
    MsgSearchRsp = 1;
    MsgInsertReq = 2;
    MsgInsertRsp = 3;
    MsgUpdateReq = 4;
    MsgUpdateRsp = 5;
    MsgErrorRsp  = 6;
    MsgAdmin     = 7;
}

// SearchRequest search request
message SearchRequest {
    optional bytes  id      = 1 [(gogoproto.customname) = "ID"];
    optional uint64 db      = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "DB"];
    repeated float  xq      = 3;
    optional int64  offset  = 4 [(gogoproto.nullable) = false];
    optional bool   last    = 5 [(gogoproto.nullable) = false];
}

// SearchResponse search response
message SearchResponse {
    optional bytes  id         = 1 [(gogoproto.customname) = "ID"];
    repeated float  distances  = 2;
    repeated int64  xids       = 3;
    optional uint64 db         = 4 [(gogoproto.nullable) = false, (gogoproto.customname) = "DB"];
    optional bool   searchNext = 5 [(gogoproto.nullable) = false];
}

// InsertRequest insert request
message InsertRequest {
    optional bytes  id     = 1 [(gogoproto.customname) = "ID"];
    repeated float  xbs    = 2;
    repeated int64  ids    = 3;
    optional int64  offset = 4 [(gogoproto.nullable) = false];
}

// InsertResponse insert response
message InsertResponse {
    optional bytes id = 1 [(gogoproto.customname) = "ID"];
}

// UpdateRequest insert request
message UpdateRequest {
    optional bytes  id  = 1 [(gogoproto.customname) = "ID"];
    optional uint64 db  = 2 [(gogoproto.nullable) = false, (gogoproto.customname) = "DB"];
    repeated float  xbs = 3;
    repeated int64  ids = 4;
}

// UpdateResponse update response
message UpdateResponse {
    optional bytes id = 1 [(gogoproto.customname) = "ID"];
}

// ErrResponse error response
message ErrResponse {
    optional bytes             id                = 1 [(gogoproto.customname) = "ID"];
    optional string            message           = 2 [(gogoproto.nullable) = false];
    optional NotLeader         notLeader         = 3;
    optional DBNotFound        dbNotFound        = 4 [(gogoproto.customname) = "DBNotFound"];
    optional StaleEpoch        staleEpoch        = 5;
    optional ServerIsBusy      serverIsBusy      = 6;
    optional StaleCommand      staleCommand      = 7;
    optional StoreNotMatch     storeNotMatch     = 8;
    optional RaftEntryTooLarge raftEntryTooLarge = 9;
}

message NotLeader {
    optional uint64    id     = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
    optional meta.Peer leader = 2 [(gogoproto.nullable) = false];
}

message StoreNotMatch {}

message ServerIsBusy {}

message StaleCommand {}

message DBNotFound {
    optional uint64 id = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
}

message StaleEpoch {
    repeated meta.VectorDB newDBs = 1 [(gogoproto.nullable) = false];
}

message RaftEntryTooLarge {
    optional uint64 id        = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "ID"];
    optional uint64 entrySize = 2 [(gogoproto.nullable) = false];
}